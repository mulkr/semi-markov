from .emission import EmissionProb
from .utils import multidim, singldim
from numpy.random import Generator as rng

__all__ = ['HSMM']

class HSMM:
    def __init__(self, emission: EmissionProb, transition: multidim, duration: multidim, init_dist: singldim) -> None: ...
    @property
    def emission(self) -> EmissionProb: ...
    @emission.setter
    def emission(self, other: EmissionProb) -> None: ...
    @property
    def transition(self) -> multidim: ...
    @transition.setter
    def transition(self, tmat: multidim) -> None: ...
    @property
    def duration(self) -> multidim: ...
    @duration.setter
    def duration(self, durs: multidim) -> None: ...
    @property
    def init_dist(self) -> singldim: ...
    @init_dist.setter
    def init_dist(self, start: singldim) -> None: ...
    def decode(self, observations: singldim): ...
    def sample(self, amount: int = 1, random: rng | None = None) -> tuple[singldim | float, singldim | int]: ...
    def fit(self) -> None: ...
