import abc
import numpy as np
import numpy.typing as npt
from .utils import multidim, np_multidim, np_singldim, singldim
from abc import abstractmethod
from numpy.random import Generator as rng

__all__ = ['EmissionProb', 'GaussianProb']

class EmissionProb(metaclass=abc.ABCMeta):
    @abstractmethod
    def sample_state(self, state: int, amount: int | tuple[int] = 1, generator: rng | None = None) -> npt.NDArray[np.float64] | float: ...
    @abstractmethod
    def update(self, prob: multidim, obs: singldim) -> None: ...
    @abstractmethod
    def likelihood(self, observations: float | singldim) -> npt.NDArray[np.float64]: ...
    @abstractmethod
    def copy(self) -> EmissionProb: ...
    @abstractmethod
    def state_num(self) -> int: ...

class GaussianProb(EmissionProb):
    def __init__(self, mean: float | singldim | multidim, std: float | singldim | multidim) -> None: ...
    @property
    def mean(self) -> np_singldim | np_multidim: ...
    @mean.setter
    def mean(self, mean: float | singldim | multidim): ...
    @property
    def std(self) -> np_singldim | np_multidim: ...
    @std.setter
    def std(self, std: float | singldim | multidim): ...
    def likelihood(self, observations: float | singldim) -> npt.NDArray[np.float64]: ...
    def sample_state(self, state: int, amount: int | tuple[int] = 1, generator: rng | None = None) -> npt.NDArray[np.float64] | float: ...
    def copy(self) -> EmissionProb: ...
    def update(self, prob: multidim, obs: singldim) -> None: ...
    def state_num(self) -> int: ...
